//abstract class
//method declared but not implemented are called abstract method.and final and static methods cannot be declared as abstract.


//interfaces 
//an interface is something like a blueprint of a class.
//interfaces can hava only abstract metho
interface shape{
    double pi=3.14;//public,static ,final
    double getSquare(double r);//public and abstract
    {
          System.out.println("hello");
    }   

}
class Circle Interface Shape{
    public double getSquare(double r ){
        return r*r;
    }
    void fun(){
        System.out.println("hey,implemted an interface named shaped");
    }
}
public class InterfaceStudy{
    public static void main(String args[])
    {
      Circle c = new Circle();
    }
}

//multiple interfaces
interface A{
    int x=10;
    void fun();
}
interface D{
    int x=29;
    void fun();
}
interface O extends A,D{
    void fun();
}
class D implements O{
    public void fun(){
        System.out.println("hello i ' am in function in D");
    }
}
class C implements A,D{  //multiple inheritance in java
    public void fun(){
        System.out.println("hello , i 'am function in c");
        System.out.println(A.X);//ambiguity resolved using fully    qualified name
    
        System.out.println(D.X);//ambiguity resolved using fully    qualified name
        System.out.println(A.super.hashCode());
        System.out.println(D.super.hashCode());

    }

}
public class MultipleInheriteanceStudy{
    public static void main(Stringa args[]){
     C c=new C();
     c.fun();
      
     D d=new D();
     d.fun();
    }
}
